// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.5.1 (swiftlang-1300.0.31.4 clang-1300.0.29.6)
// swift-module-flags: -target arm64-apple-ios11.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name MetroIpoSdk
import AVFoundation
import Alamofire
import CoreGraphics
import Foundation
@_exported import MetroIpoSdk
import Swift
import UIKit
import _Concurrency
public protocol Metro {
  func start(origin view: UIKit.UIViewController, style presentationStyle: UIKit.UIModalPresentationStyle) throws
}
public class MetroIpo : MetroIpoSdk.Metro {
  public init(configuration cfg: MetroIpoSdk.MetroConfig) throws
  public func start(origin view: UIKit.UIViewController, style presentationStyle: UIKit.UIModalPresentationStyle = .fullScreen) throws
  public func with(responseHandler completion: @escaping (MetroIpoSdk.MetroSdkResponse<Swift.String, MetroIpoSdk.MetroSdkError>) -> Swift.Void)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @IBDesignable @_Concurrency.MainActor(unsafe) final public class YPDrawSignatureView : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) weak final public var delegate: MetroIpoSdk.YPSignatureDelegate?
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) final public var strokeWidth: CoreGraphics.CGFloat {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) final public var strokeColor: UIKit.UIColor {
    @objc get
    @objc set
  }
  @available(*, deprecated, renamed: "backgroundColor")
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) final public var signatureBackgroundColor: UIKit.UIColor {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) final public var doesContainSignature: Swift.Bool {
    get
  }
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @_Concurrency.MainActor(unsafe) @objc override final public func draw(_ rect: CoreGraphics.CGRect)
  @_Concurrency.MainActor(unsafe) @objc override final public func touchesBegan(_ touches: Swift.Set<UIKit.UITouch>, with event: UIKit.UIEvent?)
  @_Concurrency.MainActor(unsafe) @objc override final public func touchesMoved(_ touches: Swift.Set<UIKit.UITouch>, with event: UIKit.UIEvent?)
  @_Concurrency.MainActor(unsafe) @objc override final public func touchesEnded(_ touches: Swift.Set<UIKit.UITouch>, with event: UIKit.UIEvent?)
  @_Concurrency.MainActor(unsafe) @objc override final public func gestureRecognizerShouldBegin(_ gestureRecognizer: UIKit.UIGestureRecognizer) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) final public func clear()
  @_Concurrency.MainActor(unsafe) final public func getSignature(scale: CoreGraphics.CGFloat = 1) -> UIKit.UIImage?
  @_Concurrency.MainActor(unsafe) final public func getCroppedSignature(scale: CoreGraphics.CGFloat = 1) -> UIKit.UIImage?
  @_Concurrency.MainActor(unsafe) final public func getPDFSignature() -> Foundation.Data
  @objc deinit
}
@objc public protocol YPSignatureDelegate {
  @objc func didStart(_ view: MetroIpoSdk.YPDrawSignatureView)
  @objc func didFinish(_ view: MetroIpoSdk.YPDrawSignatureView)
}
public struct Theme {
  public init(colorPrimary: UIKit.UIColor? = UIColor(named: "ColorPrimary", in: Bundle(for: MetroIpo.self), compatibleWith: nil), colorButtonPrimary: UIKit.UIColor? = UIColor(named: "ColorPrimary", in: Bundle(for: MetroIpo.self), compatibleWith: nil), colorButtonPrimaryText: UIKit.UIColor? = UIColor(named: "ColorWhite", in: Bundle(for: MetroIpo.self), compatibleWith: nil), colorButtonPrimaryPressed: UIKit.UIColor? = UIColor(named: "ColorDark", in: Bundle(for: MetroIpo.self), compatibleWith: nil), enableDarkMode: Swift.Bool = true)
}
public protocol ConfigBuilder {
  func setCode(code: Swift.String?) -> MetroIpoSdk.MetroIpoConfig
  func setDomain(url: Swift.String?) -> MetroIpoSdk.MetroIpoConfig
  func setAppearance(_ theme: MetroIpoSdk.Theme?) -> MetroIpoSdk.MetroIpoConfig
  func withCustomLocalization(usingTable name: Swift.String?, inBundle bundle: Foundation.Bundle) -> MetroIpoSdk.MetroIpoConfig
  func build() -> MetroIpoSdk.MetroConfig
}
public class MetroIpoConfig : MetroIpoSdk.ConfigBuilder {
  public init()
  public func setCode(code: Swift.String?) -> MetroIpoSdk.MetroIpoConfig
  public func setDomain(url: Swift.String?) -> MetroIpoSdk.MetroIpoConfig
  public func setAppearance(_ theme: MetroIpoSdk.Theme?) -> MetroIpoSdk.MetroIpoConfig
  public func withCustomLocalization(usingTable name: Swift.String?, inBundle bundle: Foundation.Bundle) -> MetroIpoSdk.MetroIpoConfig
  public func build() -> MetroIpoSdk.MetroConfig
  @objc deinit
}
public enum MetroSdkResponse<Value, Error> {
  case success(Value)
  case failure(Error)
  case start
  case error(MetroIpoSdk.MetroSdkError)
}
public struct MetroConfig {
}
public enum MetroSdkError : Swift.Error {
  case CODE_INVALID
  case CODE_MISSING
  case API_NOT_AVAILABLE
  case UPLOAD_INVALID
  case UPLOAD_KEY_MISSING
  case USER_CANCELLED
  case UPLOAD_ID_MISSING
  case FILE_URL_MISSING
  case exception(withMessage: Swift.String)
}
